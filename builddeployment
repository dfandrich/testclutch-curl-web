#!/bin/bash
# Build a Test Clutch install bundle for deploying on Virtuozzo
# This assume the availability of GNU shell tools.
set -e
shopt -s extglob  # needed for git scheme check

# git repo with source code
readonly GITREPO="${2:-../testclutch/}"

# git tag/branch/tree-ish of source
readonly TAG="${1:-master}"

# Build bundle for this CPython version
readonly PYVER=3.11

# Use these pip package platforms
declare -ar PLATFORMS=(linux_x86_64 manylinux2014_x86_64)

# Get source
test -d build && rm -rf build
mkdir build
mkdir -p tmp$$git/testclutch
if [[ -z "${GITREPO/+([-+_a-zA-Z0-9]):*/}" && "${GITREPO:0:5}" != "file:" ]]; then
    # Looks like a remote git URL with a remote scheme
    # Options to optimize remote git fetching
    readonly GITOPTS=--depth=1
else
    readonly GITOPTS=--shared
fi

git clone --branch "$TAG" $GITOPTS "$GITREPO" tmp$$git/testclutch

test -e testclutch_deploy-commit.txt && mv -f testclutch_deploy-commit.txt testclutch_deploy-commit.txt.old
echo "$(git -C tmp$$git/testclutch rev-parse HEAD)" testclutch > testclutch_deploy-commit.txt

# Start virtual environment to avoid touching system packages (mostly pip)
python3 -m venv .venv-builddeployment
source .venv-builddeployment/bin/activate

# Update local pip first (if necessary); ver. before 23 don't work quite right
python3 -m pip install 'pip>=23'

# Check if the Python version available here matches the run-time
# version needed
if [[ "$(python3 -c "import platform,sys; print(f'{platform.python_implementation()}{sys.version_info.major}.{sys.version_info.minor}')")" != "CPython$PYVER" ]]; then
    echo Python version is not CPython "$PYVER" so byte compilation is not available
fi
# If Python versions match, we could add --compile to pip install to generate
# useful byte code files.

# Get Python dependencies and install everything under build/
# Ideally, we'd want --compile here and then remove the source code for a
# minimal installation package, but two things conspire against that:
# 1) the Python major/minor version used to compile must match the version used
#    at run-time,
# 2) the compiled versions in __pycache__ are only used if the .py file also
#    exists.
# The first issue can only be overcome by ensuring the right major/minor
# version of python is available when this script is run (done by the check
# above).  The second issue can be overcome by moving the files from
# __pycache__ to the parent directory then each renamed (to FOO.pyc) (pip
# doesn't seem to offer an option to avoid __pycache__ and name mangling, but
# -X pycache_prefix=PATH might be utilized for this).
# But even if this is done, the run-time savings are likely to be pretty minimal
# since these are all fairly long-running scripts whose compile times are
# amortized over long run times.
python3 -m pip install --disable-pip-version-check --isolated --target="$PWD/build/application/python" --no-compile --python-version="$PYVER" --implementation=cp "${PLATFORMS[@]/#/--platform=}" --only-binary=:all: -r requirements-testclutch.txt tmp$$git/testclutch
test -e testclutch_deploy-requirements.txt && mv -f testclutch_deploy-requirements.txt testclutch_deploy-requirements.txt.old
python3 -m pip list --disable-pip-version-check --isolated --path="$PWD/build/application/python" --format=freeze > testclutch_deploy-requirements.txt
rm -rf tmp$$git

# Fix the shebang at the start of the script which points to a venv python
# which we don't want in the distribution archive
sed -i -e '1s@#!.*$@#!/usr/bin/python3@' build/application/python/bin/*

# Remove dist-info directories, which aren't needed on the target
rm -rf build/application/python/*.dist-info

# Add static files to the install bundle
cp -r --preserve=timestamps distfiles/. build

# Build bundle from staging area
tar -C build --xz -cf testclutch_deploy.tar.xz .
rm -rf build

# Deactivate and clean up virtual environment
deactivate
rm -r .venv-builddeployment

echo 'Done: testclutch_deploy.tar.xz'
