# Testclutch configuration file

# Code repository to work on
check_repo = 'https://github.com/curl/curl'

# log parsing functions to try, in order
log_parsers = [
    'testclutch.logparser.curlparse.parse_log_file',
    'testclutch.logparser.pytestparse.parse_log_file',
    'testclutch.logparser.pytestparse.parse_log_file_summary',
]
# Maximum number of builds to look at when performing flaky analysis
# curl does around 100 per month, so 300 means about 3 months worth of tests
flaky_builds_max = 300

# Time in hours that makes a job "disabled"
disabled_job_hours = 24 * 6  # 6 days

# List of authors to which "ready" PRs will be limited, when set
# This contains all committers to curl/curl and members of the curl org
pr_ready_logins = frozenset((
    'bagder', 'dfandrich', 'danielgustafsson', 'jay', 'icing', 'mback2k', 'samueloph', 'nickzman',
    'zagor', 'tatsuhiro-t', 'xquery', 'gvanem', 'vszakats', 'cmeister2', 'jzakrzewski',
    'MarcelRaad', 'mkauf', 'renovate[bot]'))

# Which origins need to be checked before commenting on a PR
pr_comment_origins = frozenset(('circle', 'gha'))

# URL to use for Test Clutch in PR comments
pr_comment_url = 'https://testclutch.curl.se/'

# Metadata fields over which to create the features matrix
matrix_meta_fields = ['arch', 'targetarch', 'os', 'buildsystem', 'compiler', 'testformat',
                      'testmode', 'withvalgrind', 'withevent', 'paralleljobs', 'dailybuild',
                      'curldeps', 'features', 'curlprotocols']

# Metadata fields to split into subfields using a regular expression
# The format is {'fieldname': r'<regex>', ...}  where <regex> is passed to re.split to split a text
# string into multiple values, each of which is treated like a separate feature value.
matrix_meta_splits = {
    'curldeps': r'(?:/[^ ]+(?: |$))|(?: )',
    'curlprotocols': r' ',
    'features': r' ',
}

# Transformations to perform on the metadata fields in matrix_meta_fields
# The format is {'fieldname': [('pattern1', 'replacement2'), ('pattern2', 'replacement2'), ...]
# where the pattern and replacement strings are as specified for re.sub(). They are executed in
# the order given for each fieldname and on each value resulting from matrix_meta_splits.
matrix_meta_transforms = {
    'arch': [('(?i)^arm64$', 'aarch64'), (r'(?i)^amd64$', 'x86_64')],
    'compiler': [(r'^(GNU|GNU_C)$', 'gcc'), (r'(?i)^clang$', 'clang'),
                 (r'^INTEL_UNIX_C$', 'IntelC'), (r'^TINY_C$', 'TinyC'),
                 (r'(?i)^APPLECLANG$', 'AppleClang')],
    'curldeps': [(r'\(', ''), (r'^libcurl$', '')],  # parenthesized dependencies & useless libcurl
    'dailybuild': [(r'^\d+$', 'yes')],
    'targetarch': [('(?i)^arm64$', 'aarch64'), (r'(?i)^amd64$', 'x86_64')],
    'withevent': [(r'^no$', '')],     # leave only 'yes'
    'withvalgrind': [(r'^no$', '')],  # leave only 'yes'
    'paralleljobs': [(r'^.+$', 'yes')],  # turn anything into 'yes'
    'testmode': [(r'^normal$', '')],  # leave only 'torture'
}
